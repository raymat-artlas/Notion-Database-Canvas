const { convertToNotionSchema } = require('./src/lib/notion.ts');

// Test database with Japanese characters in formula
const testDatabase = {
  id: 'test-db',
  name: '„ÉÜ„Çπ„Éà„Éá„Éº„Çø„Éô„Éº„Çπ',
  properties: [
    {
      id: 'title-prop',
      name: '„Çø„Ç§„Éà„É´',
      type: 'title',
      order: 0
    },
    {
      id: 'formula-prop',
      name: 'Ë®àÁÆóÂºè',
      type: 'formula',
      order: 1,
      formulaConfig: {
        expression: 'prop("„Çø„Ç§„Éà„É´") + " - „ÉÜ„Çπ„Éà"',
        referencedProperties: ['„Çø„Ç§„Éà„É´']
      }
    },
    {
      id: 'formula-prop2',
      name: '‰æ°Ê†ºË®àÁÆó',
      type: 'formula',
      order: 2,
      formulaConfig: {
        expression: 'prop("‰æ°Ê†º") * prop("Êï∞Èáè")',
        referencedProperties: ['‰æ°Ê†º', 'Êï∞Èáè']
      }
    }
  ]
};

console.log('üß™ Testing formula conversion with Japanese characters...');
console.log('üìã Input database:', JSON.stringify(testDatabase, null, 2));

try {
  const result = convertToNotionSchema(testDatabase);
  console.log('\n‚úÖ Conversion successful!');
  console.log('üì§ Result properties:', JSON.stringify(result.properties, null, 2));
  
  // Show specific formula properties
  Object.entries(result.properties).forEach(([propName, propConfig]) => {
    if (propConfig.type === 'formula') {
      console.log(`\nüßÆ Formula property "${propName}":`);
      console.log(`   Expression: "${propConfig.formula.expression}"`);
      console.log(`   Bytes: ${Buffer.from(propConfig.formula.expression, 'utf8').length}`);
      console.log(`   Encoded: ${JSON.stringify(propConfig.formula.expression)}`);
    }
  });
  
} catch (error) {
  console.error('\n‚ùå Conversion failed:', error);
  console.error('Stack:', error.stack);
}