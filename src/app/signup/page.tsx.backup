'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { Eye, EyeOff, Key, Mail, Lock, UserPlus, ArrowLeft, CheckCircle, AlertCircle } from 'lucide-react';
import { createUserWithAccessCode } from '../../lib/auth';
import NotificationModal from '../../components/UI/NotificationModal';
import { useNotification } from '../../hooks/useNotification';

export default function SignupPage() {
  const router = useRouter();
  const { notification, closeNotification, showError, showSuccess } = useNotification();
  
  const [formData, setFormData] = useState({
    accessCode: '',
    email: '',
    password: '',
    confirmPassword: ''
  });
  
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [step, setStep] = useState<'code' | 'account'>('code');

  // アクセスコード検証
  const handleCodeSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.accessCode.trim()) {
      showError('アクセスコードを入力してください');
      return;
    }
    
    setStep('account');
  };

  // アカウント作成
  const handleAccountSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // バリデーション
    if (!formData.email || !formData.password || !formData.confirmPassword) {
      showError('すべての項目を入力してください');
      return;
    }
    
    if (formData.password !== formData.confirmPassword) {
      showError('パスワードが一致しません');
      return;
    }
    
    if (formData.password.length < 6) {
      showError('パスワードは6文字以上で入力してください');
      return;
    }
    
    setIsLoading(true);
    
    try {
      const result = await createUserWithAccessCode(
        formData.email,
        formData.password,
        formData.accessCode
      );
      
      if (result.success) {
        showSuccess(result.message || 'アカウントを作成しました！');
        // 少し待ってからダッシュボードにリダイレクト
        setTimeout(() => {
          router.push('/dashboard');
        }, 2000);
      } else {
        showError(result.error || 'アカウント作成に失敗しました');
      }
    } catch (error) {
      showError('アカウント作成中にエラーが発生しました');
    } finally {
      setIsLoading(false);
    }
  };

  const handleInputChange = (field: keyof typeof formData) => (
    e: React.ChangeEvent<HTMLInputElement>
  ) => {
    setFormData(prev => ({
      ...prev,
      [field]: e.target.value
    }));
  };

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl shadow-xl border border-gray-200 w-full max-w-md overflow-hidden">
        {/* ヘッダー */}
        <div className="px-8 pt-8 pb-6 bg-gradient-to-r from-blue-50 to-indigo-50">
          <div className="flex items-center justify-between mb-6">
            <Link
              href="/login"
              className="flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors"
            >
              <ArrowLeft size={20} />
              <span>ログインに戻る</span>
            </Link>
          </div>
          
          <div className="text-center">
            <div className="inline-flex items-center justify-center w-16 h-16 bg-blue-600 rounded-xl mb-4">
              <UserPlus className="text-white" size={32} />
            </div>
            <h1 className="text-2xl font-bold text-gray-900 mb-2">
              アカウント作成
            </h1>
            <p className="text-gray-600">
              Database Canvasへようこそ
            </p>
          </div>
        </div>

        {/* プログレスインジケーター */}
        <div className="px-8 py-4 bg-gray-50 border-b border-gray-200">
          <div className="flex items-center justify-center space-x-4">
            <div className={`flex items-center gap-2 ${step === 'code' ? 'text-blue-600' : 'text-green-600'}`}>
              <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${
                step === 'code' ? 'bg-blue-100 text-blue-600' : 'bg-green-100 text-green-600'
              }`}>
                {step === 'account' ? <CheckCircle size={16} /> : '1'}
              </div>
              <span className="text-sm font-medium">アクセスコード</span>
            </div>
            
            <div className={`w-8 h-px ${step === 'account' ? 'bg-blue-600' : 'bg-gray-300'}`}></div>
            
            <div className={`flex items-center gap-2 ${step === 'account' ? 'text-blue-600' : 'text-gray-400'}`}>
              <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${
                step === 'account' ? 'bg-blue-100 text-blue-600' : 'bg-gray-100 text-gray-400'
              }`}>
                2
              </div>
              <span className="text-sm font-medium">アカウント情報</span>
            </div>
          </div>
        </div>

        {/* コンテンツ */}
        <div className="p-8">
          {step === 'code' && (
            <form onSubmit={handleCodeSubmit} className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  アクセスコード
                </label>
                <div className="relative">
                  <Key className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                  <input
                    type="text"
                    placeholder="例: TEST30"
                    value={formData.accessCode}
                    onChange={handleInputChange('accessCode')}
                    className="w-full pl-10 pr-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
                    autoFocus
                  />
                </div>
                <div className="mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                  <div className="flex items-start gap-2">
                    <AlertCircle size={16} className="text-blue-600 mt-0.5 flex-shrink-0" />
                    <div className="text-xs text-blue-800">
                      <p className="font-medium mb-1">アクセスコードについて</p>
                      <p>招待された方は、提供されたアクセスコードを入力してください。有効なコードのみでアカウント作成が可能です。</p>
                    </div>
                  </div>
                </div>
              </div>
              
              <button
                type="submit"
                className="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium"
              >
                次へ進む
              </button>
            </form>
          )}

          {step === 'account' && (
            <form onSubmit={handleAccountSubmit} className="space-y-6">
              {/* アクセスコード確認 */}
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <div className="flex items-center gap-2">
                  <CheckCircle className="text-green-600" size={16} />
                  <span className="text-sm font-medium text-green-800">
                    アクセスコード: {formData.accessCode}
                  </span>
                </div>
                <button
                  type="button"
                  onClick={() => setStep('code')}
                  className="text-xs text-green-700 hover:text-green-900 underline mt-1"
                >
                  変更する
                </button>
              </div>

              {/* メールアドレス */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  メールアドレス
                </label>
                <div className="relative">
                  <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                  <input
                    type="email"
                    placeholder="your@email.com"
                    value={formData.email}
                    onChange={handleInputChange('email')}
                    className="w-full pl-10 pr-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
                    required
                  />
                </div>
              </div>

              {/* パスワード */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  パスワード
                </label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                  <input
                    type={showPassword ? 'text' : 'password'}
                    placeholder="6文字以上"
                    value={formData.password}
                    onChange={handleInputChange('password')}
                    className="w-full pl-10 pr-12 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                  >
                    {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                  </button>
                </div>
              </div>

              {/* パスワード確認 */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  パスワード確認
                </label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                  <input
                    type={showConfirmPassword ? 'text' : 'password'}
                    placeholder="パスワードを再入力"
                    value={formData.confirmPassword}
                    onChange={handleInputChange('confirmPassword')}
                    className="w-full pl-10 pr-12 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                  >
                    {showConfirmPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                  </button>
                </div>
              </div>

              <button
                type="submit"
                disabled={isLoading}
                className="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors font-medium flex items-center justify-center gap-2"
              >
                {isLoading ? (
                  <>
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                    アカウント作成中...
                  </>
                ) : (
                  <>
                    <UserPlus size={18} />
                    アカウントを作成
                  </>
                )}
              </button>
            </form>
          )}
        </div>

        {/* フッター */}
        <div className="px-8 py-6 bg-gray-50 border-t border-gray-200 text-center">
          <p className="text-sm text-gray-600">
            既にアカウントをお持ちですか？{' '}
            <Link href="/login" className="text-blue-600 hover:text-blue-700 font-medium">
              ログイン
            </Link>
          </p>
        </div>
      </div>

      {/* 通知モーダル */}
      <NotificationModal
        isOpen={notification.isOpen}
        onClose={closeNotification}
        onConfirm={notification.onConfirm}
        type={notification.type}
        title={notification.title}
        message={notification.message}
        confirmText={notification.confirmText}
        cancelText={notification.cancelText}
      />
    </div>
  );
}